// Generated by Dagger (https://dagger.dev).
package demo.app.paintball.util.services;

import dagger.internal.DoubleCheck;
import demo.app.paintball.data.ble.BleServiceImpl;
import demo.app.paintball.data.ble.BleServiceImpl_Factory;
import demo.app.paintball.data.mqtt.MqttServiceImpl;
import demo.app.paintball.data.mqtt.MqttServiceImpl_Factory;
import demo.app.paintball.data.rest.RestServiceImpl;
import demo.app.paintball.data.rest.RestServiceImpl_Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerInjectorService implements InjectorService {
  private Provider<RestServiceImpl> restServiceImplProvider;

  private Provider<MqttServiceImpl> mqttServiceImplProvider;

  private Provider<BleServiceImpl> bleServiceImplProvider;

  private Provider<PlayerService> playerServiceProvider;

  private DaggerInjectorService() {

    initialize();
  }

  public static Builder builder() {
    return new Builder();
  }

  public static InjectorService create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize() {
    this.restServiceImplProvider = DoubleCheck.provider(RestServiceImpl_Factory.create());
    this.mqttServiceImplProvider = DoubleCheck.provider(MqttServiceImpl_Factory.create());
    this.bleServiceImplProvider = DoubleCheck.provider(BleServiceImpl_Factory.create());
    this.playerServiceProvider = DoubleCheck.provider(PlayerService_Factory.create());
  }

  @Override
  public RestServiceImpl rest() {
    return restServiceImplProvider.get();
  }

  @Override
  public MqttServiceImpl mqtt() {
    return mqttServiceImplProvider.get();
  }

  @Override
  public BleServiceImpl ble() {
    return bleServiceImplProvider.get();
  }

  @Override
  public PlayerService player() {
    return playerServiceProvider.get();
  }

  public static final class Builder {
    private Builder() {
    }

    public InjectorService build() {
      return new DaggerInjectorService();
    }
  }
}
